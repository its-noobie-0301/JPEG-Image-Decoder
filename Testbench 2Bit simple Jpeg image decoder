module jpeg_decoder_2bit_tb;

    // Testbench signals
    reg clk;
    reg rst_n;
    reg [1:0] data_in;
    reg valid_in;
    wire [1:0] pixel_out;
    wire valid_out;

    // Instantiate the DUT (Device Under Test)
    jpeg_decoder_2bit dut (
        .clk(clk),
        .rst_n(rst_n),
        .data_in(data_in),
        .valid_in(valid_in),
        .pixel_out(pixel_out),
        .valid_out(valid_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 100MHz clock (10ns period)
    end

    // Test procedure
    initial begin
        // Initialize signals
        rst_n = 0;
        data_in = 2'b00;
        valid_in = 0;

        // Reset
        #20 rst_n = 1;

        // Test Case 1: Input 2'b00
        #10;
        data_in = 2'b00;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 2'b00 && valid_out == 1)
            $display("Test Case 1 Passed: Input 00, Output 00");
        else
            $display("Test Case 1 Failed: Input 00, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 2: Input 2'b01
        #10;
        data_in = 2'b01;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 2'b01 && valid_out == 1)
            $display("Test Case 2 Passed: Input 01, Output 01");
        else
            $display("Test Case 2 Failed: Input 01, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 3: Input 2'b10
        #10;
        data_in = 2'b10;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 2'b10 && valid_out == 1)
            $display("Test Case 3 Passed: Input 10, Output 10");
        else
            $display("Test Case 3 Failed: Input 10, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 4: Input 2'b11
        #10;
        data_in = 2'b11;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 2'b11 && valid_out == 1)
            $display("Test Case 4 Passed: Input 11, Output 11");
        else
            $display("Test Case 4 Failed: Input 11, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 5: Invalid input (no valid_in)
        #10;
        data_in = 2'b11;
        valid_in = 0;
        #30;
        if (valid_out == 0)
            $display("Test Case 5 Passed: No valid input, valid_out = 0");
        else
            $display("Test Case 5 Failed: No valid input, valid_out = %b", valid_out);

        // Test Case 6: Reset during operation
        #10;
        data_in = 2'b10;
        valid_in = 1;
        #5;
        rst_n = 0;
        #10;
        rst_n = 1;
        #10;
        if (pixel_out == 2'b00 && valid_out == 0)
            $display("Test Case 6 Passed: Reset clears output");
        else
            $display("Test Case 6 Failed: Reset, Output %b, Valid %b", pixel_out, valid_out);

        // End simulation
        #50;
        $display("Simulation Completed");
        $finish;
    end

    // Monitor signals
    initial begin
        $monitor("Time=%0t rst_n=%b data_in=%b valid_in=%b pixel_out=%b valid_out=%b",
                 $time, rst_n, data_in, valid_in, pixel_out, valid_out);
    end

endmodule
