module jpeg_decoder_2bit_parallel_tb;

    // Testbench signals
    reg clk;
    reg rst_n;
    reg [3:0] data_in;  // 4-bit input (two 2-bit pixels)
    reg valid_in;
    wire [3:0] pixel_out; // 4-bit output (two 2-bit pixels)
    wire valid_out;

    // Instantiate the DUT (Device Under Test)
    jpeg_decoder_2bit_parallel dut (
        .clk(clk),
        .rst_n(rst_n),
        .data_in(data_in),
        .valid_in(valid_in),
        .pixel_out(pixel_out),
        .valid_out(valid_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 100MHz clock (10ns period)
    end

    // Test procedure
    initial begin
        // Initialize signals
        rst_n = 0;
        data_in = 4'b0000;
        valid_in = 0;

        // Reset
        #20 rst_n = 1;

        // Test Case 1: Input 4'b0000 (Pixel 1: 00, Pixel 2: 00)
        #10;
        data_in = 4'b0000;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 4'b0000 && valid_out == 1)
            $display("Test Case 1 Passed: Input 0000, Output 0000");
        else
            $display("Test Case 1 Failed: Input 0000, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 2: Input 4'b0101 (Pixel 1: 01, Pixel 2: 01)
        #10;
        data_in = 4'b0101;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 4'b0101 && valid_out == 1)
            $display("Test Case 2 Passed: Input 0101, Output 0101");
        else
            $display("Test Case 2 Failed: Input 0101, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 3: Input 4'b1001 (Pixel 1: 10, Pixel 2: 01)
        #10;
        data_in = 4'b1001;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 4'b1001 && valid_out == 1)
            $display("Test Case 3 Passed: Input 1001, Output 1001");
        else
            $display("Test Case 3 Failed: Input 1001, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 4: Input 4'b1110 (Pixel 1: 11, Pixel 2: 10)
        #10;
        data_in = 4'b1110;
        valid_in = 1;
        #10;
        valid_in = 0;
        #20;
        if (pixel_out == 4'b1110 && valid_out == 1)
            $display("Test Case 4 Passed: Input 1110, Output 1110");
        else
            $display("Test Case 4 Failed: Input 1110, Output %b, Valid %b", pixel_out, valid_out);

        // Test Case 5: Invalid input (no valid_in)
        #10;
        data_in = 4'b1111;
        valid_in = 0;
        #30;
        if (valid_out == 0)
            $display("Test Case 5 Passed: No valid input, valid_out = 0");
        else
            $display("Test Case 5 Failed: No valid input, valid_out = %b", valid_out);

        // Test Case 6: Reset during operation
        #10;
        data_in = 4'b1010;
        valid_in = 1;
        #5;
        rst_n = 0;
        #10;
        rst_n = 1;
        #10;
        if (pixel_out == 4'b0000 && valid_out == 0)
            $display("Test Case 6 Passed: Reset clears output");
        else
            $display("Test Case 6 Failed: Reset, Output %b, Valid %b", pixel_out, valid_out);

        // End simulation
        #50;
        $display("Simulation Completed");
        $finish;
    end

    // Monitor signals
    initial begin
        $monitor("Time=%0t rst_n=%b data_in=%b valid_in=%b pixel_out=%b valid_out=%b",
                 $time, rst_n, data_in, valid_in, pixel_out, valid_out);
    end

endmodule
